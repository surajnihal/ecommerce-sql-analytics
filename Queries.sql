-- EDA

SELECT * FROM category;
SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM payments;
SELECT * FROM products;
SELECT * FROM sellers;
SELECT * from shippings;

SELECT DISTINCT payment_status
FROM payments;

SELECT *
FROM shippings
WHERE return_date IS NOT NULL;

-- Advanced Analysis 

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

-- Join order_items and orders and product
-- orderitems new total_sales column: qty * price per unit 
-- Group By product_name

SELECT * FROM order_items;

-- Creating a new column, total_sales
ALTER TABLE order_items 
ADD COLUMN total_sales FLOAT;

-- updating the new column with values

UPDATE order_items
SET total_sales = quantity * price_per_unit;
SELECT * FROM order_items;


SELECT
	oi.product_id,
	p.product_name,	
	SUM(oi.total_sales) AS total_sale,
	COUNT(o.order_id) AS total_orders
FROM orders AS o
JOIN 
order_items AS oi
ON oi.order_id = o.order_id
JOIN 
products AS p
ON p.product_id = oi.product_id
GROUP BY 1,2 
ORDER BY 3 DESC 
LIMIT 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

-- category_id, category_name, total revenue, total contribution
-- oi - oroducts -- category
-- group by cat id and name sum total(oi)
-- total contribution

SELECT 
	p.category_id,
	c.category_name,
	SUM(oi.total_sales) as total_sale,
	SUM(oi.total_sales)/(SELECT SUM(total_sales) FROM order_items) * 100 AS contribution 
FROM order_items AS oi
JOIN 
products as p
ON p.product_id = oi.product_id
LEFT JOIN category as c
ON c.category_id = p.category_id
GROUP BY 1,2
ORDER BY 3 DESC;

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

SELECT 
	cust.customer_id,
	CONCAT(cust.first_name, '', cust.last_name) as full_name,
	SUM(total_sales)/COUNT(o.order_id) as AOV,
	COUNT(o.order_id) as total_orders
FROM customers as cust
JOIN orders as o
ON cust.customer_id = o.customer_id
JOIN order_items as oi
ON oi.order_ID = o.order_id
GROUP BY 1,2 
HAVING COUNT(o.order_id) > 5;
	
/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale
*/

-- Last 1 year data
-- each month 

SELECT 
	year,
	month,
	total_sale as current_month_sale,
	LAG(total_sale, 1) OVER(ORDER BY year, month) as last_month_sale
FROM
(
SELECT
	EXTRACT(MONTH FROM o.order_date) AS Month,
	EXTRACT(YEAR FROM o.order_date) AS Year,
	ROUND(
			SUM(oi.total_sales::numeric)
			,2) as total_sale
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id 
WHERE o.order_date >= CURRENT_DATE - INTERVAL '1 year' 
GROUP BY 1,2
ORDER BY 2,1
) as t1

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

-- Using Sub - Queries 

SELECT * -- CURRENT_DATE - registration_DATE (not available)
FROM customers 
WHERE customer_id NOT IN (SELECT DISTINCT customer_ID FROM orders);

-- Using LEFT JOIN

SELECT *
FROM customers as c
LEFT JOIN orders as o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL;

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

-- Join all the tables, get the required columns
-- Rank the sales by state 
-- Use CTE to find the least-selling category 

WITH rank_table
AS
(
SELECT 
	cust.state AS state,
	cat.category_name AS Category,
	SUM(oi.total_sales) AS total_sales,
	RANK() OVER (PARTITION BY cust.state ORDER BY SUM(oi.total_sales) ASC) AS rank_sales
FROM category AS cat
JOIN 
products AS p
ON p.category_id = cat.category_id
JOIN 
order_items AS oi
ON oi.product_id = p.product_id
JOIN 
orders AS o
ON o.order_id = oi.order_id
JOIN 
customers AS cust
ON cust.customer_ID = o.customer_id
GROUP BY 1,2
)
SELECT * 
FROM rank_table 
WHERE rank_sales = 1;

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

-- cust - o - oi
-- find total sales
-- rank them

SELECT 
	cust.customer_id,
	CONCAT(cust.first_name, '', cust.last_name) as full_name,
	SUM(total_sales) AS CLTV,
	DENSE_RANK() OVER (ORDER BY SUM(total_sales) DESC) as cx_ranking
FROM customers as cust
JOIN orders as o
ON cust.customer_id = o.customer_id
JOIN order_items as oi
ON oi.order_ID = o.order_id
GROUP BY 1,2 
	
/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
	p.product_name,
	inv.warehouse_id,
	inv.stock,
	inv.last_stock_date
FROM inventory AS inv
JOIN products AS p
ON p.product_id = inv.product_id
WHERE inv.stock <10;

/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

-- ship - orders - cust 
-- Shipping Date - Order Date > 3 we need all such orders 

SELECT 
	cust.*,
	o.*,
	ship.shipping_providers,
	ship.shipping_date - o.order_date AS delivery_delay 
FROM customers AS cust
JOIN orders AS o
	ON o.customer_id = cust.customer_id
JOIN shippings AS ship
	ON ship.order_id = o.order_id
WHERE 
	ship.shipping_date - o.order_date > 3;

/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

-- p - o
-- payment status 
-- percentage of succcesful payments

SELECT 
	p.payment_status,
	COUNT(*) as total_count,
	COUNT(*)/(SELECT COUNT(*) FROM payments):: numeric * 100 AS percentage
FROM orders as o
JOIN payments as p
	ON o.order_id = p.order_id
GROUP BY 1

/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

-- sales - orders - order items 
-- sales value is the succesfull orders that each seller has sold

WITH top5_sellers
AS
(
SELECT 
	s.seller_id,
	s.seller_name,
	SUM(oi.total_sales) as total_sale
FROM sellers AS s
JOIN orders AS o
	ON s.seller_id = o.seller_id
JOIN order_items AS oi
	ON oi.order_id = o.order_id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 5
),
seller_report
AS
(
SELECT
	o.seller_id,
	t.seller_name,
	o.order_status,
	COUNT(*) AS total_orders
FROM orders AS o
JOIN top5_sellers AS t
	ON t.seller_id = o.seller_id
WHERE 
	o.order_status NOT IN ('Inprogress', 'Returned')
GROUP BY 1,2,3
)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 AS successful_orders_percentage
FROM seller_report
GROUP BY 1,2

/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- COGS: the sum of all direct costs associated with making a product

-- oi - p
-- group by pid
-- sum(total_sales - cogs * qty) as profit
-- Rank them 

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER(ORDER BY profit_margin DESC) AS product_rank
FROM
(
SELECT 
	p.product_id,
	p.product_name,
	-- SUM(oi.total_sales - (p.cogs * oi.quantity)) as profit,
	SUM(oi.total_sales - (p.cogs * oi.quantity))/sum(oi.total_sales) * 100 as profit_margin
FROM order_items as oi
JOIN products as p
	ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1

/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

-- p - o - s - oi
-- total_return/total_orders * 100 as return_percentage 

SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/COUNT(*) * 100 ::numeric as returned_percentage
FROM order_items as oi 
JOIN products as p
 ON oi.product_id = p.product_id
JOIN orders as o
 ON o.order_id = oi.order_id
GROUP BY 1,2
ORDER BY 5 DESC

/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

WITH cte1
AS
(SELECT * FROM sellers
WHERE seller_id NOT IN (SELECT seller_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 month')
)

SELECT
	o.seller_id,
	MAX(o.order_date) as last_sale_date,
	MAX(oi.total_sales) as last_sale_amount
FROM orders as o 
JOIN cte1 
	ON cte1.seller_id = o.seller_id
JOIN order_items as oi
	ON o.order_id = oi.order_id
GROUP BY 1

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

--  c - o 

SELECT 
	full_name as customers,
	total_orders,
	total_return,
	CASE 
		WHEN total_return > 5 THEN 'returning_customers' ELSE 'NEW'
	END as cx_category
FROM
(SELECT
	c.customer_id,
	CONCAT(c.first_name, '', c.last_name) as full_name,
	COUNT(o.order_id) as total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_return
FROM customers as c
JOIN orders as o
 ON o.customer_id = c.customer_id
JOIN order_items as oi
 ON oi.order_id = o.order_id 
GROUP By 1
)

/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

-- c - o - oi

SELECT * FROM
(
SELECT
	c.state,
	CONCAT(c.first_name, '', c.last_name) as full_name,
	COUNT(o.order_id) as total_orders,
	SUM(total_sales) as total_sale,
	DENSE_RANK() OVER (PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC) as rank
FROM customers as c
JOIN orders as o
 ON c.customer_id = o.customer_id 
JOIN order_items as oi
 ON oi.order_id = o.order_id
GROUP BY 1,2
) as t1
WHERE rank <= 5

/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

SELECT
	s.shipping_providers,
	COUNT(o.order_id) as total_orders,
	SUM(oi.total_sales) as total_revenue,
	COALESCE(AVG(s.return_date - s.shipping_date), 0) as avergae_days
FROM shippings as s
JOIN orders as o
	ON s.order_id = o.order_id
JOIN order_items as oi
	ON oi.order_id = o.order_id
GROUP BY 1

/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2023) and current_year(2024)
Challenge: Return product_id, product_name, 2023 revenue and 2024 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

--  p - oi - o
-- filter year
-- g by pid 

WITH last_year_table
AS
(
SELECT
	p.product_id,
	p.product_name,
	SUM(oi.total_sales) as revenue
FROM products as p
JOIN order_items as oi
	ON oi.product_id = p.product_id
JOIN orders as o
	ON o.order_id = oi.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY 1,2
),

current_year_table
AS
(
SELECT
	p.product_id,
	p.product_name,
	SUM(oi.total_sales) as revenue
FROM products as p
JOIN order_items as oi
	ON oi.product_id = p.product_id
JOIN orders as o
	ON o.order_id = oi.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2024
GROUP BY 1,2
)

SELECT 
	ly.product_id,
	ly.product_name,
	ly.revenue as last_year_revenue,
	cy.revenue as current_year_revenue,
	ly.revenue - cy.revenue as rev_difference,
	ROUND((cy.revenue - ly.revenue) ::numeric/ly.revenue ::numeric * 100, 2)  as revenue_dec_ratio
FROM last_year_table as ly
JOIN current_year_table as cy
 ON ly.product_id = cy.product_id
WHERE
	ly.revenue > cy.revenue	
ORDER BY 6 DESC
LIMIT 10

---------------------------------------------

-- Store Procedure
/*
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
*/
-- 

SELECT * FROM products

-- p_id: 1 - Apple Airpods 3rd - 
-- p_id: 2 - Apple AirPods Max

SELECT * FROM inventory

-- p_id: 1 - 55 in stock
-- p_id: 2 - 39 in stock

SELECT * FROM orders;
SELECT * FROM order_items;
SELECT * FROM inventory;
SELECT * FROM products;
order_id,
order_date,
customer_id,
seller_id
order_item_id,
product_id,
quantity,

CREATE OR REPLACE PROCEDURE add_sales
(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)
LANGUAGE plpgsql
AS $$

DECLARE

v_count INT;
v_price FLOAT;
v_product VARCHAR(50);

BEGIN

-- fetching product name and price
	SELECT 
	 price, product_name
	 INTO
	 v_price, v_product
	FROM products
	WHERE product_id = p_quantity;
	
-- checking stock and product availability in inventory	
	SELECT
		COUNT(*)
		INTO
		v_count
	FROM inventory 
	WHERE 
		product_id = 1
		AND
		stock >= p_quantity;
	
	IF v_count > 0 THEN
        -- inserting values in orders table
    	INSERT INTO orders(order_id, order_date, customer_id, seller_id)
		VALUES
		(p_order_id, CURRENT_DATE, p_customer_id, p_seller_id);

		-- inserting values in order_items table
		INSERT INTO order_items(order_item_id, order_id, product_id, quantity, price_per_unit, total_sales)
		VALUES
		(p_order_item_id, p_order_id, p_customer_id, p_quantity, v_price, v_price*p_quantity);

		-- updating inventory
		UPDATE inventory
		SET stock = stock - p_quantity
		WHERE product_id = p_product_id;

		RAISE NOTICE 'Product: % sale has been processed and added to the inventory',v_product;

	ELSE
		RAISE NOTICE 'The product: % is not available',v_product;

	END IF;

END
$$

-- calling the procedure

call add_sales
(
25000,
2,
5,
25001,
1,
40
)
